{"version":3,"sources":["webpack:///./src/component/ng2-autocomplete/autocomplete-list.ts?fb48","webpack:///./src/component/ng2-autocomplete/autocomplete.ts?4e52"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,6CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8KAA6K,WAAW;AACxL,wCAAuC,oBAAoB,UAAU,gBAAgB,YAAY,kBAAkB,mBAAmB;AACtI,UAAS;AACT;AACA;AACA;AACA,EAAC;AACD;;;;;;;;AChCA;AACA;AACA;AACA;AACA,6CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,EAAC;AACD","file":"ng2-autocomplete.js","sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require(\"@angular/core\");\r\nvar AutocompleteList = (function () {\r\n    function AutocompleteList() {\r\n        this.selected = new core_1.EventEmitter();\r\n    }\r\n    AutocompleteList.prototype.onClick = function (item) {\r\n        this.selected.emit(item);\r\n    };\r\n    __decorate([\r\n        core_1.Output(), \r\n        __metadata('design:type', Object)\r\n    ], AutocompleteList.prototype, \"selected\", void 0);\r\n    AutocompleteList = __decorate([\r\n        core_1.Component({\r\n            selector: \"autocomplete-list\",\r\n            template: \"<div class=\\\"dropdown-menu  search-results\\\">\\n                    <a *ngFor=\\\"let item of list\\\" class=\\\"dropdown-item\\\" (click)=\\\"onClick(item)\\\">{{item.text}}</a>\\n               </div>\",\r\n            styles: [\".search-results { position: relative; right: 0; display: block; padding: 0; overflow: hidden; font-size: .9rem;}\"]\r\n        }), \r\n        __metadata('design:paramtypes', [])\r\n    ], AutocompleteList);\r\n    return AutocompleteList;\r\n}());\r\nexports.AutocompleteList = AutocompleteList;\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/component/ng2-autocomplete/autocomplete-list.ts\n ** module id = 163\n ** module chunks = 1 2\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require(\"@angular/core\");\r\nvar autocomplete_list_1 = require(\"./autocomplete-list\");\r\nvar AutocompleteDirective = (function () {\r\n    function AutocompleteDirective(viewRef, dcl) {\r\n        this.viewRef = viewRef;\r\n        this.dcl = dcl;\r\n        this.selected = new core_1.EventEmitter();\r\n        this.term = \"\";\r\n        this.listCmp = undefined;\r\n        this.refreshTimer = undefined;\r\n        this.searchInProgress = false;\r\n        this.searchRequired = false;\r\n    }\r\n    AutocompleteDirective.prototype.onKey = function (event) {\r\n        var _this = this;\r\n        if (!this.refreshTimer) {\r\n            this.refreshTimer = setTimeout(function () {\r\n                if (!_this.searchInProgress) {\r\n                    _this.doSearch();\r\n                }\r\n                else {\r\n                    _this.searchRequired = true;\r\n                }\r\n            }, 200);\r\n        }\r\n        this.term = event.target.value;\r\n        if (this.term === \"\" && this.listCmp) {\r\n            this.removeList();\r\n        }\r\n    };\r\n    AutocompleteDirective.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.selected.subscribe(function () {\r\n            _this.removeList();\r\n        });\r\n    };\r\n    AutocompleteDirective.prototype.doSearch = function () {\r\n        var _this = this;\r\n        this.refreshTimer = undefined;\r\n        if (this.search && this.term !== \"\") {\r\n            this.searchInProgress = true;\r\n            this.search(this.term)\r\n                .then(function (res) {\r\n                _this.searchInProgress = false;\r\n                if (_this.searchRequired) {\r\n                    _this.searchRequired = false;\r\n                    _this.doSearch();\r\n                }\r\n                else {\r\n                    _this.diplayList(res);\r\n                }\r\n            })\r\n                .catch(function (err) {\r\n                console.log(\"search error:\", err);\r\n                _this.removeList();\r\n            });\r\n        }\r\n    };\r\n    AutocompleteDirective.prototype.diplayList = function (list) {\r\n        var _this = this;\r\n        if (!this.listCmp) {\r\n            this.dcl.loadNextToLocation(autocomplete_list_1.AutocompleteList, this.viewRef)\r\n                .then(function (cmp) {\r\n                _this.listCmp = cmp;\r\n                _this.updateList(list);\r\n                (_this.listCmp.instance).selected\r\n                    .subscribe(function (selectedItem) {\r\n                    _this.selected.emit(selectedItem);\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            this.updateList(list);\r\n        }\r\n    };\r\n    AutocompleteDirective.prototype.updateList = function (list) {\r\n        if (this.listCmp) {\r\n            (this.listCmp.instance).list = list;\r\n        }\r\n    };\r\n    AutocompleteDirective.prototype.removeList = function () {\r\n        this.searchInProgress = false;\r\n        this.searchRequired = false;\r\n        if (this.listCmp) {\r\n            this.listCmp.destroy();\r\n            this.listCmp = undefined;\r\n        }\r\n    };\r\n    __decorate([\r\n        core_1.Input(\"ng2-autocomplete\"), \r\n        __metadata('design:type', Function)\r\n    ], AutocompleteDirective.prototype, \"search\", void 0);\r\n    __decorate([\r\n        core_1.Output(\"ng2AutocompleteOnSelect\"), \r\n        __metadata('design:type', Object)\r\n    ], AutocompleteDirective.prototype, \"selected\", void 0);\r\n    AutocompleteDirective = __decorate([\r\n        core_1.Directive({\r\n            selector: \"[ng2-autocomplete]\",\r\n            host: {\r\n                \"(keyup)\": \"onKey($event)\"\r\n            }\r\n        }), \r\n        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.DynamicComponentLoader])\r\n    ], AutocompleteDirective);\r\n    return AutocompleteDirective;\r\n}());\r\nexports.AutocompleteDirective = AutocompleteDirective;\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/component/ng2-autocomplete/autocomplete.ts\n ** module id = 164\n ** module chunks = 1 2\n **/"],"sourceRoot":""}